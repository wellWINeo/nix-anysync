name: "Check for Package Updates"
description: "Checks if a newer version available"
inputs:
  nix_path:
    description: "Path to the Nix package file"
    required: true
runs:
  using: "composite"
  steps:
    - name: Extract package info
      id: extract
      shell: bash
      run: |
        VERSION=$(grep -oP 'version = "\K[^"]+' "${{ inputs.nix_path }}")
        OWNER=$(grep -oP 'owner = "\K[^"]+' "${{ inputs.nix_path }}")
        REPO=$(grep -oP 'repo = "\K[^"]+' "${{ inputs.nix_path }}")
        echo "Current version: $VERSION"
        echo "owner=$OWNER" >> $GITHUB_OUTPUT
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check latest release
      id: check-release
      shell: bash
      run: |
        LATEST=$(curl -s "https://api.github.com/repos/${{ steps.extract.outputs.owner }}/${{ steps.extract.outputs.repo }}/releases/latest" | \
          jq -r '.tag_name | sub("^v"; "")')
        echo "Latest release: $LATEST"
        echo "latest_version=$LATEST" >> $GITHUB_OUTPUT
        echo "issue_title=Update ${{ steps.extract.outputs.repo }} to $LATEST" >> $GITHUB_OUTPUT

    - name: Check for existing issue
      id: check-existing
      if: ${{ steps.extract.outputs.current_version != steps.check-release.outputs.latest_version }}
      uses: actions/github-script@v6
      env:
        ISSUE_TITLE: ${{ steps.check-release.outputs.issue_title }}
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: [ 'dependency-update' ],
            state: 'open' 
          })

          const existingIssue = issues.find(issue => 
            issue.title === process.env['ISSUE_TITLE']
          )

          if (existingIssue) {
            console.log(`Found existing issue: ${existingIssue.html_url}`) 
          }

          core.setOutput('exists', !!existingIssue)

    - name: Create issue if update available
      if:
        ${{ steps.extract.outputs.current_version != steps.check-release.outputs.latest_version
        && steps.check-existing.outputs.exists == 'false' }}
      uses: actions/github-script@v6
      env:
        ISSUE_TITLE: ${{ steps.check-release.outputs.issue_title }}
        CURRENT_VERSION: ${{ steps.extract.outputs.current_version }}
        LATEST_VERSION: ${{ steps.check-release.outputs.latest_version }}
      with:
        script: |
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: process.env['ISSUE_TITLE'],
            body: `**Package path**: \`${ core.getInput("nix_path") }\`
            \n**Current version**: ${ process.env['CURRENT_VERSION'] }
            \n**Available version**: ${ process.env['LATEST_VERSION'] }`,
            labels: ['dependency-update']
          })
